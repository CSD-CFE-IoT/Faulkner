#! /usr/bin/env python

import rospy
import math

from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

pub = None

BURGER_MAX_LIN_VEL = 0.22
ANG_VEL_STEP_SIZE = 0.1
SECTOR_RADS = 0.628319 # 36 degrees

def clbk_laser(msg):
    sector_index_range = math.trunc(SECTOR_RADS/msg.angle_increment)
    regions = {
        'right':  min(min(msg.ranges[0:sector_index_range]), 10),
        'fright': min(min(msg.ranges[sector_index_range:2*sector_index_range]), 10),
        'front':  min(min(msg.ranges[2*sector_index_range:3*sector_index_range]), 10),
        'fleft':  min(min(msg.ranges[3*sector_index_range:4*sector_index_range]), 10),
        'left':   min(min(msg.ranges[4*sector_index_range:5*sector_index_range]), 10),
    }
    
    take_action(regions)
    
def take_action(regions):
    msg = Twist()
    linear_x = 0
    angular_z = 0
    
    state_description = ''
    
    if regions['front'] > 1 and regions['fleft'] > 1 and regions['fright'] > 1:
        state_description = 'case 1 - nothing'
        linear_x = BURGER_MAX_LIN_VEL
        angular_z = 0
    elif regions['front'] < 1 and regions['fleft'] > 1 and regions['fright'] > 1:
        state_description = 'case 2 - front'
        linear_x = 0
        angular_z = BURGER_MAX_LIN_VEL/2.0
    elif regions['front'] > 1 and regions['fleft'] > 1 and regions['fright'] < 1:
        state_description = 'case 3 - fright'
        linear_x = 0
        angular_z = BURGER_MAX_LIN_VEL/2.0
    elif regions['front'] > 1 and regions['fleft'] < 1 and regions['fright'] > 1:
        state_description = 'case 4 - fleft'
        linear_x = 0
        angular_z = -BURGER_MAX_LIN_VEL/2.0
    elif regions['front'] < 1 and regions['fleft'] > 1 and regions['fright'] < 1:
        state_description = 'case 5 - front and fright'
        linear_x = 0
        angular_z = BURGER_MAX_LIN_VEL/2.0
    elif regions['front'] < 1 and regions['fleft'] < 1 and regions['fright'] > 1:
        state_description = 'case 6 - front and fleft'
        linear_x = 0
        angular_z = -BURGER_MAX_LIN_VEL/2.0
    elif regions['front'] < 1 and regions['fleft'] < 1 and regions['fright'] < 1:
        state_description = 'case 7 - front and fleft and fright'
        linear_x = 0
        angular_z = BURGER_MAX_LIN_VEL/2.0
    elif regions['front'] > 1 and regions['fleft'] < 1 and regions['fright'] < 1:
        state_description = 'case 8 - fleft and fright'
        linear_x = BURGER_MAX_LIN_VEL/2.0
        angular_z = 0
    else:
        state_description = 'unknown case'
        rospy.loginfo(regions)

    rospy.loginfo(state_description)
    msg.linear.x = linear_x
    msg.angular.z = angular_z
    pub.publish(msg)

def main():
    global pub
    
    rospy.init_node('reading_laser')
    
    pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
    
    sub = rospy.Subscriber('scan', LaserScan, clbk_laser)
    
    rospy.spin()

if __name__ == '__main__':
    main()

